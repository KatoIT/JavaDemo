package Sort_Algorithm.My_Application;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;

import Sort_Algorithm.MinPQ;

public class SimbolTableStudent {

	public static Scanner scanner = new Scanner(System.in);
	private static SymbolTable<String, Student> st;
	private static MinPQ<Student> pq;

	public static void main(String[] args) {

		File file = new File("student2.txt");
		FileReader fr = null;
		BufferedReader br = null;
		try {
			// Step 2: Make a file reader
			fr = new FileReader(file);

			// Step 3: Make a buffer to read data
			br = new BufferedReader(fr);

			// Step 4: Read data from buffer to variable
			String data;
			while ((data = br.readLine()) != null) {
				String[] element = data.split("//");
				String[]  abc = element[1].split("-");
				System.out.println(element[1]);
				Student student = new Student(element[0], abc[0], abc[1], Double.parseDouble(abc[2]),
						Double.parseDouble(abc[3]), Double.parseDouble(abc[4]));

				st.put(element[0], student);
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			// Step 6: Close all connections
			try {
				br.close();
				fr.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
		pq = new MinPQ<Student>((s1, s2) -> {
			String val1 = null;
			String val2 = null;
			Double var1 = 0.0;
			Double var2 = 0.0;
			val1 = s1.getLastName(); // sort by LastName
			val2 = s2.getLastName();
			return val1.compareTo(val2);

		});
		
		System.out.println(pq);
		
	}
}
